{
  "hash": "8a4224a31a4a430368830eab9e75bbc6",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntalk-title: \"Introduction to Panel Data in Epidemiology\"\ntalk-short-title: \"Understanding Data\"\ntalk-subtitle: \"MICOM Tooling Workshop 2025\"\ntalk-date: \"11 December -- Morning\"\nformat: revealjs\n---\n\n---\n---\n\n\n\\DeclareMathOperator*{\\minimize}{minimize}\n\n\n\n\n\n\n\n\n\n::: flex\n::: w-20\n\n:::\n::: w-80\n## {{< meta talk-title >}} {background-image=\"gfx/cover-art-1.svg\" background-position=\"bottom\"}\n\n### {{< meta talk-subtitle >}}\n\n<br>\n\n#### {{< meta author >}} \n[with huge thanks to Logan Brooks, Xueda Shen, and also to Nat DeFries, Dmitry Shemetov, and David Weber]{.fstyle}\n\n\n{{< meta talk-date >}}\n\n\n:::\n:::\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n\n\n\n## Outline\n\n1. The Delphi Research Group\n\n1. Workshop Overview and System Setup\n\n1. Panel Data\n\n1. Versioned Data\n\n1. Epidata Repository and API\n\n1. Find Data Sources and Signals\n\n1. `{epidatr}`\n\n1. Versioning in `{epidatr}`\n\n\n# The Delphi Research Group\n\n## About Delphi\n\n* Founded in 2012 at Carnegie Mellon University, now expanded to UC Berkeley, and University of British Columbia.\n\n* Currently 5 faculty, ~10 PhD students, ~15 staff (mostly software engineers).\n\n* Easy to join us from anywhere (lots of volunteers during Covid-19 pandemic).\n\n* We are:\n    + CDC Center of Excellence for Influenza and Covid-19 Forecasting (2019-24).\n    + CDC Innovation Center for Outbreak Analytics and Disease Modeling (2024-29).\n\n[**Our mission:**]{.primary} To develop the theory and practice of [epidemic detection, tracking and forecasting]{.primary}, and their use in decision making, both public and private.\n\n## What does Delphi do?\n\n* Procure [real-time, aggregated data streams]{.primary} informative of infectious diseases and syndromes, in collaboration with partners in industry and government.\n\n* Extract signals and make them widely available via the [Epidata platform & API]{.primary}.\n\n* Develop and deploy algorithms for [epidemic detection, tracking, forecasting]{.primary}.\n\n* Develop and maintain statistical software packages for these tasks.\n\n* Make it all production-grade, maximally-accessible, and open-source (to serve CDC, state and local public health agencies, epi-forecasting researchers, data journalists, the public)\n\n## What we provide\n\n![](gfx/web_of_parts.svg){fig-align=center}\n\n# Workshop Overview and System Setup\n\n## What we will cover\n\n- Characteristics of panel data in epidemiology\n- Tools for processing and plotting panel data\n- Statistical background on nowcasting and forecasting\n- Tools for building nowcasting and forecasting models\n- Plenty of examples throughout of real case studies\n\n## Goals part I\n\n- Expose you to a statistical way of thinking about now/forecasting\n- Certain basic mindsets (e.g., the importance of empirical validation\n  using techniques like time series cross-validation) are ubiquitous\n- Certain basic modeling considerations (e.g., starting simple and\n  building up complexity, taming variance through regularization,\n  addressing nonstationarity with trailing training windows) are also\n  ubiquitous\n\n## Goals part II\n\n- Expose you to software packages which aid processing, tracking,\n  nowcasting, and forecasting with panel data\n- These tools are still in development and we welcome your feedback\n- We have tried hard to get the framework right; but many individual\n  pieces themselves could still be improved\n- If these aren't working for you, then we want to hear from you!\n- We welcome collaboration, and everything we do is open source\n\n## A disclaimer\n\n- Our backgrounds are primarily in statistics and computer science\n- This obviously influences our way of thinking and our approach to\n  nowcasting and forecasting\n- We don't have nearly as much experience with traditional epi models\n  but we do have opinions about the pros/cons. Ask us at any point if\n  you have a question about why we're doing things a certain way\n\n## One last slide\n\n- This workshop is supposed to be useful for YOU. Ask questions if\n  you have them, don't be shy\n- We may not (likely won't?) cover everything. Hopefully the materials\n  will be a resource for you beyond this workshop\n\n\n## System setup -- Passive viewing\n\n<br>\n\n### All of the slides are at\n\n<br>\n\n[<https://cmu-delphi.github.io/micom-tooling-workshop-2025>]{style=\"text-align: center;\"}\n\n<br>\n\n### The source code is in the Repo\n\n<br>\n\n<https://github.com/cmu-delphi/micom-tooling-workshop-2025>\n\n<br>\n\nThis is enough, but we hope you'll want to work through the code as we go along.\n\n<br>\n\n[Detailed versions of the next few slides are shown at the Repo Link above.]{.secondary}\n\n## System setup -- Required software\n\n<br>\n\n### We assume you already have\n\n<br>\n\n1. `R`\n\n<br>\n\n2. An IDE. We'll use RStudio, but you can use VSCode or Emacs or Whatnot\n\n## System setup -- Downloading the materials\n\n### Easy way:\n\n1. Click the [Big Green Button]{.fourth-colour} that says <kbd>< > Code â–¾</kbd>\n2. Choose [Download Zip]{.primary}\n3. Open the Zip directory and then Open `micom-tooling-workshop-2025.Rproj`\n\n### More expert (local `git` user):\n\n1. Click the [Big Green Button]{.fourth-colour} that says <kbd>< > Code â–¾</kbd>\n2. Copy the URL.\n3. Open RStudio, select File > New Project > Version Control. Paste there and proceed.\n\n### Even more expert (wants `github` remote):\n\n1. Click the Grey Button that says <kbd>â‘‚ Fork â–¾</kbd>\n2. Proceed along the same lines as above.\n\n## System setup -- Installing required packages\n\nWe will use a [lot]{.tertiary} of packages.\n\n### We've tried to make it so you can get them all at once (with the right versions)\n\nðŸ¤ž We hope this works... ðŸ¤ž\n[Note that you can \"Copy to Clipboard\"]{.fourth-colour}\n\n<br>\n\nIn RStudio:\n\n``` r\ninstall.packages(\"pak\") # good for installing from non-CRAN sources\npak::pkg_install(\"cmu-delphi/InsightNetFcast24\", dependencies = TRUE)\nInsightNetFcast24::verify_setup()\n```\n\n<br>\n\nHopefully, you see:\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output .cell-output-stderr}\n\n```\nâœ” You should be good to go!\n```\n\n\n:::\n:::\n\n\n\nAsk for help if you see something like:\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output .cell-output-error}\n\n```\nError in `verify_setup()`:\n! The following packages do not have the correct version:\nâ„¹ Installed: epipredict 0.2.0.\nâ„¹ Required: epipredict == 0.1.5.\n```\n\n\n:::\n:::\n\n\n\n# Panel Data\n\n## Panel data\n\n* [**Panel data**](https://en.wikipedia.org/wiki/Panel_data) or longitudinal data, contain cross-sectional measurements of subjects over time.\n\n* Since we're working with aggregated data, the subjects are geographic units (e.g. counties, states).\n\n<!-- and not individuals.-->\n\n* In table form, panel data is a time index + one or more locations/keys.\n\n* **Ex**: The % of outpatient doctor visits that are COVID-related in CA from June 2020 to Dec. 2021 ([docs](https://cmu-delphi.github.io/delphi-epidata/api/covidcast-signals/doctor-visits.html)):\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 549 Ã— 3\n   time_value geo_value percent_cli\n   <date>     <chr>           <dbl>\n 1 2020-06-01 ca               2.75\n 2 2020-06-02 ca               2.57\n 3 2020-06-03 ca               2.48\n 4 2020-06-04 ca               2.41\n 5 2020-06-05 ca               2.57\n 6 2020-06-06 ca               2.63\n 7 2020-06-07 ca               2.73\n 8 2020-06-08 ca               3.04\n 9 2020-06-09 ca               2.97\n10 2020-06-10 ca               2.99\n# â„¹ 539 more rows\n```\n\n\n:::\n:::\n\n\n\n## Examples of panel data - COVID-19 cases\n\n[[**JHU CSSE COVID cases per 100k **]{.primary}](https://cmu-delphi.github.io/delphi-epidata/api/covidcast-signals/jhu-csse.html) estimates the daily number of new confirmed COVID-19 cases per 100,000 population, averaged over the past 7 days.\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](day1-morning_files/figure-revealjs/examples-panel-covid2-1.svg){fig-align='center'}\n:::\n:::\n\n\n\n::: {.notes}\n\n* WA switch to weekly reporting in 2022\n* FL reports \"whenever\" (weekly, biweekly, three days in a row, then 4 zeros, etc.)\n* API calculates change from cumulative, so no-report becomes a 0.\n* If state decreases total, then we see a negative.\n\n:::\n\n<!--\n\n## Examples of panel data - CHNG-CLI\n\n[[**Change Healthcare COVID-like illness (CHNG-CLI)**]{.primary}](https://cmu-delphi.github.io/delphi-epidata/api/covidcast-signals/chng.html) reports the percentage of outpatient visits for COVID-related symptoms, based on deidentified Change Healthcare claims data.\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](day1-morning_files/figure-revealjs/examples-chng-cli-1.svg){fig-align='center'}\n:::\n:::\n\n\n\n## Examples of panel data - CHNG-COVID\n\n[[**Change Healthcare COVID (CHNG-COVID)**]{.primary}](https://cmu-delphi.github.io/delphi-epidata/api/covidcast-signals/chng.html) reports the percentage of outpatient visits with confirmed COVID-19, based on Change Healthcare claims data.\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](day1-morning_files/figure-revealjs/examples-chng-covid-1.svg){fig-align='center'}\n:::\n:::\n\n\n\n-->\n\n<!--  Numerator = denote the Covid counts. Denominator be the total count of visits. Scaling by population is not necessary here because the signal is already normalized to the total number of visits, which acts as a proxy for population size. -->\n\n\n## Examples of panel data - HHS Admissions\n\n[[**Confirmed COVID-19 Hospital Admissions per 100k**]{.primary}](https://cmu-delphi.github.io/delphi-epidata/api/covidcast-signals/hhs.html) estimates the daily sum of adult and pediatric confirmed COVID-19 hospital admissions, per 100,000 population, averaged over the past 7 days.\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](day1-morning_files/figure-revealjs/examples-hhs-admissions-1.svg){fig-align='center'}\n:::\n:::\n\n\n\n\n<!--\n## All together - Visualizing multiple panel data signals\nExample: gathering different signals + visualizing panel data\n\n\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n\n\n## All together - Visualizing multiple panel data signals\nExample: gathering different signals + **scaling** + visualizing panel data\n\n\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n\n<div style=\"text-align: center;\">\n<small>[Figure 1 from Reinhart et al. (2021)](https://www.pnas.org/doi/10.1073/pnas.2111452118)</small>\n</div>\n\n**Takeaway:** The auxiliary signals track changes in the official reported cases quite well. This is clearer when they have all been placed on the same range as reported cases per 100,000 people.\n-->\n\n\n<!-- Not panel data, 2 signals, same location, over time (bivariate time-series)\n## Examples of panel data - COVID-19 cases and deaths in CA\n* [**Takeaway**]{.primary}: Cases appear to strongly correlate with deaths several weeks later.\n* We'll see this again in an upcoming session...\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](day1-morning_files/figure-revealjs/plot-ca-cases-deaths-1.svg){fig-align='center'}\n:::\n:::\n\n\n\n-->\n\n\n\n# Versioned Data\n\n## Intro to versioned data\n\n* Many epidemic aggregates are subject to [reporting delays and revisions]{.primary}\n\n* This is because individual-level data has delayed availability:\n\n[Person comes to ER â†’ Admitted â†’ Has some tests â†’ Tests come back â†’ Entered into the system â†’ ...]{.fourth-colour}\n\n* So, a \"Hospital admission\" may not attributable to a particular condition\nuntil a few days have passed (the patient may even have been released)\n\n* Aggregated data have a longer pipeline from the incident to the report.\n\n* So we have to track both: [when the event occurred]{.primary} and\n[when it was reported]{.primary}\n\n* Additionally, various mistakes lead to revisions\n\n* This means there can be [many different values]{.primary} for the same date\n\n## Versioned data\n\n* The event time is indicated by `time_value` (aka `reference_date`)\n\n* Now, we add a second time index to indicate the data `version` (aka `reporting_date`)\n\n* `version` = the time at which we saw a particular `value` associated to a `time_value`\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 Ã— 4\n  time_value geo_value percent_cli version   \n  <date>     <chr>           <dbl> <date>    \n1 2020-06-01 ca               2.14 2020-06-06\n2 2020-06-01 ca               2.14 2020-06-08\n3 2020-06-01 ca               2.11 2020-06-09\n4 2020-06-01 ca               2.13 2020-06-10\n5 2020-06-01 ca               2.20 2020-06-11\n6 2020-06-01 ca               2.23 2020-06-12\n```\n\n\n:::\n:::\n\n\n\n* Note that this feature can be indicated in different ways (ex. `version`, `issue`, `release`, `as_of`).\n\n## Versioned panel data\nEstimated percentage of outpatient visits due to CLI across multiple versions.\n\n<!--\nwith updates and revisions to past data as new issue dates are released:\n-->\n\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](day1-morning_files/figure-revealjs/versioned-panel-multi-states-ex-2-1.svg){fig-align='center'}\n:::\n:::\n\n\n\n## Latency and revision in signals\n\n* [**Latency**]{.primary} the delay between data collection and availability\n\n**Example**: A signal based on insurance claims may take several days to appear as claims are processed\n\n* [**Revision**]{.primary} data is updated or corrected after initial publication\n\n**Example**: COVID-19 case reports are revised reporting backlogs are cleared\n\n## Latency and revision in signals - Example\n\n* Recall the first example of panel & versioned data we've seen...\n\n\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n\n\n* On June 1, this signal is 5 days [**latent**]{.primary}: `min(version - time_value)`\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 Ã— 5\n  time_value geo_value percent_cli version    version_time_diff\n  <date>     <chr>           <dbl> <date>     <drtn>           \n1 2020-06-01 ca               2.14 2020-06-06 5 days           \n2 2020-06-02 ca               1.96 2020-06-06 4 days           \n3 2020-06-03 ca               1.77 2020-06-06 3 days           \n4 2020-06-04 ca               1.65 2020-06-08 4 days           \n5 2020-06-05 ca               1.60 2020-06-09 4 days           \n6 2020-06-06 ca               1.34 2020-06-10 4 days           \n```\n\n\n:::\n:::\n\n\n\nand subject to [**revision**]{.primary} <!--over time (ex. consider Dec. 1's `percent_cli` across `version`):-->\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 Ã— 5\n  time_value geo_value percent_cli version    version_time_diff\n  <date>     <chr>           <dbl> <date>     <drtn>           \n1 2020-06-01 ca               2.14 2020-06-06  5 days          \n2 2020-06-01 ca               2.14 2020-06-08  7 days          \n3 2020-06-01 ca               2.11 2020-06-09  8 days          \n4 2020-06-01 ca               2.13 2020-06-10  9 days          \n5 2020-06-01 ca               2.20 2020-06-11 10 days          \n6 2020-06-01 ca               2.23 2020-06-12 11 days          \n```\n\n\n:::\n:::\n\n\n\n## Revision triangle, Outpatient visits in WA 2022\n\n* 7-day trailing average to smooth day-of-week effects\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](day1-morning_files/figure-revealjs/revision-triangle-1.png){fig-align='center'}\n:::\n:::\n\n\n\n## Revisions\nMany data sources are subject to revisions:\n\n* Case and death counts are frequently corrected or adjusted by authorities\n\n* Medical claims can take weeks to be submitted and processed\n\n<!--* In the previous slide's example because doctor's visits may be reported to the health system partners several days after they occur, these signals are typically available with several days of lag. This means that estimates for a specific day are only available several days later. -->\n\n* Lab tests and medical records can be backlogged\n\n* Surveys are not completed promptly\n\n[An accurate revision log is crucial for researchers building forecasts]{.primary}\n\n::: {.callout-important}\n## Obvious but crucial\n\nA forecast that is made today can only use data we have access to today\n:::\n\n## Three types of revisions\n\n1. [**Sources that don't revise**]{.primary} (provisional and final are the same)\n\nFacebook Survey and Google symptoms\n\n2. [**Predictable revisions**]{.secondary}\n\nClaims data (CHNG) and public health reports aligned by test, hospitalization,\nor death date\n\nAlmost always revised upward as additional claims enter the pipeline\n\n3. [**Revisions that are large and erratic to predict**]{.tertiary}\n\nCOVID cases and deaths\n\nThese are aligned by report date\n\n<!-- (which can be highly variable & less predictable compared to test data). -->\n\n## Types of revisions - Comparison between 2. and 3.\n\n* Revision behavior for two indicators in the HRR containing Charlotte, NC.\n\n<!-- Each colored line corresponds to the data as reported on a particular date (as of dates varying from 28 September through 19 October). -->\n* [**DV-CLI signal (left)**]{.secondary}: regularly revised, but effects fade\n\n* [**JHU CSSE cases (right)**]{.tertiary} remain \"as first reported\" until a major correction is made on Oct. 19\n\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](day1-morning_files/figure-revealjs/fig1-McDonald-1.svg){fig-align='center'}\n:::\n:::\n\n\n\n<!--\n<div style=\"text-align: center;\">\n<small>[Figure 1 from McDonald et al. (2021)](https://www.pnas.org/doi/pdf/10.1073/pnas.2111453118)</small>\n</div>\n-->\n## Key takeaways\n\nMedical claims revisions\n: More systematic and predictable\n\n<br><br>\n\nCOVID-19 case report revisions\n: Erratic and often unpredictable\n\n<br><br>\n\nLarge spikes or anomalies can occur as\n: Reporting backlogs are cleared\n: Changes in case definitions are implemented\n\n## Reporting backlogs - Example\n\nIn Bexar County, Texas, during the summer of 2020...\n\n* Large backlog of case reports results in a spike\n* Auxilliary signals show no such dramatic increase\n* Reports themselves may not be trustworthy without context\n\n<!--\n\n* **Left**: On July 16, 4,810 [backlogged cases]{.primary} were reported, reflecting a 2-week delay. This caused a prolonged spike due to the 7-day trailing average applied to the counts.\n\n* **Right**: CTIS estimates of CLI-in-community showed more stable underlying trends.\n\n-->\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](day1-morning_files/figure-revealjs/fig4-Reinhart-1.svg){fig-align='center'}\n:::\n:::\n\n\n\n## Reporting backlogs - Key takeaways\n\n<br><br>\n\n* [Reporting issues common across U.S. jurisdictions]{.primary}\n\n<br><br>\n\n* [Audits regularly discovered misclassified or unreported cases and deaths]{.primary}\n\n<br><br>\n\n* [Cross-checking data with external sources from different reporting systems]{.primary}\n\n\n# Epidata Repository and API\n\n## What is the Epidata repository\n\n[**Epidata:**]{.primary} repository of aggregated epi-surveillance time series\n\nCode is open-source. Signals can be either public or restricted.\n\n* To date, it has accumulated over 5 billion records.\n\n* At the peak of the pandemic, handled millions of API queries per day.\n\n* Many aren't available elsewhere\n\nData from\n: public health reporting, medical insurance claims, medical device data, Google search queries, wastewater, app-based mobility patterns.\n\n<br>\n\nAdded value\n: revision tracking, anomaly detection, trend detection, smoothing, imputation, geo-temporal-demographic disaggregation.\n\n\n## Goals of Delphi Epidata platform and repository\n\n1. **Provide many aggregated epi-surveillance time-series (\"epi-signals\")**\n    + Mirror signals from other sources, especially if revisions are not tracked <!-- E.g. CDC's own NSSP, NWSS -->\n    + Be the national historical repository of record & preserve the raw data\n\n<!-- Hence: include also signals available elsewhere, especially if they don't keep data revisions - E.g. CDC's own NSSP, NWSS -->\n\n2. **Be the go-to place for epi-signal discovery, including those held elsewhere**\n\n3. **Add value to existing signals and synthesize new ones**\n    + Via signal fusion, nowcasting, smoothing\n\n\n::: {.callout-important appearance=\"simple\"}\nMake epi-surveillance more nimble, complete, standardized, robust, and real-time\n:::\n\n\n\n\n## Features of Delphi Epidata\n\n* Built-in support for:\n    1. Data revisions (\"backfill\"), including reporting dates and changes\n    1. Geo levels w/ auto-aggregation (e.g. county, state, and nation) and specialized levels (e.g., DMA, sewer sheds)\n    1. Demographic breakdown\n    1. Representation for missingness and censoring\n    1. Population sizes and fine-grained population density\n\n* Pre-computed smoothing and normalization (customization planned)\n\n* Access control\n\n* Code is Open Source.\n\n* Signals are as accessible (w/ API, SDK) as allowed by DUAs\n\n## Epidata Documentation\n\n<br>\n\n[Delphi's Epidata API](https://cmu-delphi.github.io/delphi-epidata/) real-time access to epidemiological surveillance data\n\n<br>\n\nThe [main endpoint](https://cmu-delphi.github.io/delphi-epidata/api/covidcast.html) (covidcast) daily updates about COVID-19 and influenza in the U.S.\n\n<br>\n\nA [variety of other endpoints](https://cmu-delphi.github.io/delphi-epidata/api/README.html) international historical data for COVID-19, influenza, dengue, norovirus\n\n\n## Some of our data sources\n\n\n### Ongoing Sources:\n\nInsurance claims\n: %Covid `{inpatient, outpatient}`, by `county x day`\n\nGoogle Symptom searches\n: 7 symptoms groups, by `county x day`\n\nQuidel/Ortho antigen tests\n: %Covid by `age group x county x day`\n\nNCHS Deaths\n: all-cause, pneumonia, flu, Covid, by `state x week`\n\nNSSP ED visits\n: %Covid, %flu, %RSV, by `county x week`  (new!)\n\nNWSS Covid\n: wastewater by `sampling-site x day`  (in progress)\n\n## Some of our data sources\n### Active during pandemic, could be restarted for the next PHE:\n\nHHS Hosp/ICU beds\n: Covid, flu, by `{age-group x {state x day, facility x week}}`\n\nCTIS (\"Delphi Facebook Survey\")\n: many dozens of questions, by `county x day`\n\nSTLT-reported\n: `{cases, deaths}` via `{JHU, USAFacts}`, by `country x day`\n\nSafegraph mobility\n: misc measures by `{county x day, county x week}`\n\n\n\n## Severity pyramid\n\n![](gfx/severity-pyramid.svg){fig-align=center}\n\n\n\n# Find Data Sources & Signals\n\n## Finding data sources and signals of interest\n\nDiverse Data Streams\n\n* [**Variety of Data**]{.primary}: medical claims data, cases and deaths, mobility data\n* [**Geographic Coverage**]{.primary}: includes multiple regions, making it comprehensive yet complex\n* [**Challenge**]{.primary}: difficulty in pinpointing the specific data stream of interest\n\nUsing the Documentation\n\n* [**Comprehensive Listings**]{.primary}: details on data sources and signals for [various endpoints](https://cmu-delphi.github.io/delphi-epidata/api/covidcast_signals.html)\n\nDocs are great for a deep dive into the data, while the apps & tools are useful to see what's available...\n\n\n\n\n## Some tools to explore more easily\n\n\n[Signal discovery app](https://delphi.cmu.edu/signals/), find available epi-signals in Delphi Epidata and elsewhere in the community\n\n<br>\n\n[Signal visualization tool](https://delphi.cmu.edu/epivis/)\n\n<br>\n[Signal dashboard](https://delphi.cmu.edu/covidcast/)\n\n<br>\n\"classic\" [map-based version](https://delphi.cmu.edu/covidcast/classic/) visualize a core set of COVID-19 and flu indicators\n\n<br>\n[Covidcast signal export app](https://delphi.cmu.edu/covidcast/export/)\n\n<br>\n[Dashboard builder](https://delphi.cmu.edu/covidcast/dashboard/)\n\n\n\n\n\n# `{epidatr}`\n\n\n## Installing `{epidatr}`\n\n(you already did this, but just for posterity...)\n\nInstall the CRAN version\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Install the CRAN version\npak::pkg_install(\"epidatr\")\n```\n:::\n\n\n\n<br>\n\nor the development version\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Install the development version from the GitHub dev branch\npak::pkg_install(\"cmu-delphi/epidatr@dev\")\n```\n:::\n\n\n\nThe CRAN listing is [here](https://cran.r-project.org/package=epidatr/index.html).\n\n## Python\n\nIn Python, install [`delphi-epidata` from PyPI](https://pypi.org/project/delphi-epidata/) with\n\n``` sh\npip install delphi-epidata\n```\n\n<br>\n\n`delphi-epidata` is soon to be replaced with `epidatpy`.\n\n``` sh\n# Latest dev version\npip install -e \"git+https://github.com/cmu-delphi/epidatpy.git#egg=epidatpy\"\n\n# PyPI version (not yet available)\npip install epidatpy\n```\n\n\n\n\n## Using `{epidatr}` and `{epidatpy}`\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(epidatr)\nhhs_flu_nc <- pub_covidcast(\n  source = 'hhs',\n  signals = 'confirmed_admissions_influenza_1d',\n  geo_type = 'state',\n  time_type = 'day',\n  geo_values = 'nc',\n  time_values = c(20240401, 20240405:20240414)\n)\nhead(hhs_flu_nc, n = 3)\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 Ã— 15\n  geo_value signal     source geo_type time_type time_value direction issue     \n  <chr>     <chr>      <chr>  <fct>    <fct>     <date>         <dbl> <date>    \n1 nc        confirmedâ€¦ hhs    state    day       2024-04-01        NA 2024-04-22\n2 nc        confirmedâ€¦ hhs    state    day       2024-04-05        NA 2024-04-22\n3 nc        confirmedâ€¦ hhs    state    day       2024-04-06        NA 2024-04-22\n# â„¹ 7 more variables: lag <dbl>, missing_value <dbl>, missing_stderr <dbl>,\n#   missing_sample_size <dbl>, value <dbl>, stderr <dbl>, sample_size <dbl>\n```\n\n\n:::\n:::\n\n\n\n<br>\n\nPython equivalent:\n``` python\nres = Epidata.covidcast('hhs', 'confirmed_admissions_influenza_1d', 'day', 'state', [20240401, Epidata.range(20240405, 20240414)], 'nc')\nprint(res['result'], res['message'], len(res['epidata']))\n```\n\n\n\n## API keys\n\n* Anyone may access the Epidata API anonymously without providing any personal data!!\n\n* Anonymous API access is subject to some restrictions:\n  <small>public datasets only; 60 requests per hour; only two parameters may have multiple selections</small>\n\n* API key grants privileged access; can be obtained by [registering with us](https://api.delphi.cmu.edu/epidata/admin/registration_form)\n\n* Privileges of registration: no rate limit; no limit on multiple selections\n\n* We just want to know which signals people care about and ensure we're providing benefit\n\n<!-- rate limited to 60 requests per hour;  -->\n::: {.callout-tip}\n* The `{epidatr}` client automatically searches for the key in the `DELPHI_EPIDATA_KEY` environment variable.\n* We recommend storing it in your `.Renviron` file, which R reads by default.\n* More on setting your API key [here](https://rdrr.io/cran/epidatr/man/get_api_key.html).\n:::\n\n\n\n\n## Interactive tooling in R\n\n[**Find sources and signals in R?**]{.primary}\n\nFunctions to enhance data discovery in `{epidatr}`:\n\n`avail_endpoints()`\n: Lists all endpoints with brief descriptions\n: Highlights endpoints that cover non-US locations\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\navail_endpoints()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 28 Ã— 2\n   Endpoint                          Description                                \n   <chr>                             <chr>                                      \n 1 pub_covid_hosp_facility()         COVID hospitalizations by facility         \n 2 pub_covid_hosp_facility_lookup()  Helper for finding COVID hospitalization fâ€¦\n 3 pub_covid_hosp_state_timeseries() COVID hospitalizations by state            \n 4 pub_covidcast()                   Various COVID and flu signals via the COVIâ€¦\n 5 pub_covidcast_meta()              Metadata for the COVIDcast endpoint        \n 6 pub_delphi()                      Delphi's ILINet outpatient doctor visits fâ€¦\n 7 pub_dengue_nowcast()              Delphi's PAHO dengue nowcasts (North and Sâ€¦\n 8 pub_ecdc_ili()                    ECDC ILI incidence (Europe)                \n 9 pub_flusurv()                     CDC FluSurv flu hospitalizations           \n10 pub_fluview()                     CDC FluView ILINet outpatient doctor visits\n11 pub_fluview_clinical()            CDC FluView flu tests from clinical labs   \n12 pub_fluview_meta()                Metadata for the FluView endpoint          \n13 pub_gft()                         Google Flu Trends flu search volume        \n14 pub_kcdc_ili()                    KCDC ILI incidence (Korea)                 \n15 pub_meta()                        Metadata for the Delphi Epidata API        \n16 pub_nidss_dengue()                NIDSS dengue cases (Taiwan)                \n17 pub_nidss_flu()                   NIDSS flu doctor visits (Taiwan)           \n18 pub_nowcast()                     Delphi's ILI Nearby nowcasts               \n19 pub_paho_dengue()                 PAHO dengue data (North and South America) \n20 pub_wiki()                        Wikipedia webpage counts by article        \n21 pvt_cdc()                         CDC total and by topic webpage visits      \n22 pvt_dengue_sensors()              PAHO dengue digital surveillance sensors (â€¦\n23 pvt_ght()                         Google Health Trends health topics search â€¦\n24 pvt_meta_norostat()               Metadata for the NoroSTAT endpoint         \n25 pvt_norostat()                    CDC NoroSTAT norovirus outbreaks           \n26 pvt_quidel()                      Quidel COVID-19 and influenza testing data \n27 pvt_sensors()                     Influenza and dengue digital surveillance â€¦\n28 pvt_twitter()                     HealthTweets total and influenza-related tâ€¦\n```\n\n\n:::\n:::\n\n\n\n##  Using the `covidcast_epidata()`\n\n`covidcast_epidata()` details for signals at the COVIDcast endpoint\n\n<!-- detailed insights into data sources from the COVIDcast endpoint. -->\n\nAssign to an object\n\n``` r\ncc_ed <- covidcast_epidata()\n```\n\nList data sources\n: `cc_ed$sources`, with tibbles describing the included signals\n\nEditor Support\n: In RStudio or similar editors, use tab completion to explore:\n: `cc_ed$source$` to view available data sources.\n: `cc_ed$signals$` to see signal options with autocomplete assistance.\n\nFiltering Convenience\n: Signals are prefixed with their source for easier navigation\n\n``` r\ncc_ed <- covidcast_epidata()\nhead(cc_ed$sources, n = 2) # head(list, n = 2) will print the first two elements of the list\n```\n\n## Fetching data - COVIDcast main endpoint\n\n<br>\n\n### `pub_covidcast()` accesses the `covidcast` endpoint\n\nNeed to specify the following arguments...\n\n1. `source`: Data source name\n1. `signals`: Signal name\n1. `geo_type`: Geographic level\n1. `time_type`: Time resolution\n1. `geo_values`: Location(s)\n1. `time_values`: times of interest\n\n\n## Fetching data - COVIDcast main endpoint\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(epidatr)\nlibrary(dplyr)\n\njhu_us_cases <- pub_covidcast(\n  source = \"jhu-csse\",\n  signals = \"confirmed_7dav_incidence_prop\",\n  geo_type = \"nation\",\n  time_type = \"day\",\n  geo_values = \"us\",\n  time_values = epirange(20210101, 20210401)\n)\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 Ã— 8\n  geo_value signal             source geo_type time_value issue        lag value\n  <chr>     <chr>              <chr>  <fct>    <date>     <date>     <dbl> <dbl>\n1 us        confirmed_7dav_inâ€¦ jhu-câ€¦ nation   2021-01-01 2023-03-10   798  61.9\n2 us        confirmed_7dav_inâ€¦ jhu-câ€¦ nation   2021-01-02 2023-03-10   797  64.2\n3 us        confirmed_7dav_inâ€¦ jhu-câ€¦ nation   2021-01-03 2023-03-10   796  67.1\n```\n\n\n:::\n:::\n\n\n\n`value` is the requested signal\n\n* the number of daily new confirmed COVID-19 cases per 100,000 population\n* from January to April 2021 <!-- (and standard error if it is applicable to the metric). -->\n\n\n## Returned data - COVIDcast main endpoint\n\n`pub_covidcast()` outputs a tibble, where each row represents one observation\n\nEach observation is aggregated by time and by geographic region\n\n1. `time_value`: time period when the events occurred.\n1. `geo_value`: geographic region where the events occurred.\n1. `value`: estimated value.\n1. `stderr`: standard error of the estimate, usually referring to the sampling error.\n1. `sample_size`: number of events used in the estimation.\n\n<!--For example, a number of COVID-19 antigen tests were performed in the state of New York on August 1. The `time_value` would be August 1, with `geo_value` indicating the state of New York, while the remaining fields would give the estimated test positivity rate (the percentage of tests that were positive for COVID-19), its standard error, and the number of tests used to calculate the estimate.-->\n\n## Returned data - COVIDcast main endpoint\n\n[Also reports]{.primary}\n\n* `issue`: The time this observation was published\n\n* `lag`: The period between when the events occurred and when the observation was published\n\nTracks the complete revision history of the signal\n\nAllows for historical reconstructions of information that was available at a specific times\n\n[**More on this soon!**]{.primary}\n\n<!-- * Meaning that unlike most other sources of COVID data, it tracks the complete revision history of the signal. -->\n## Geographic levels\n\nSignals are available at different geographic levels, depending on the endpoint\n\n`confirmed_7dav_incidence_prop` is available by state\n\nChange `geo_type` and `geo_values` in the previous example\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\njhu_state_cases <- pub_covidcast(\n  source = \"jhu-csse\",\n  signals = \"confirmed_7dav_incidence_prop\",\n  geo_type = \"state\",\n  time_type = \"day\",\n  geo_values = \"*\",\n  time_values = epirange(20210101, 20210401)\n)\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 Ã— 8\n  geo_value signal             source geo_type time_value issue        lag value\n  <chr>     <chr>              <chr>  <fct>    <date>     <date>     <dbl> <dbl>\n1 ak        confirmed_7dav_inâ€¦ jhu-câ€¦ state    2021-01-01 2023-03-03   791  35.9\n2 al        confirmed_7dav_inâ€¦ jhu-câ€¦ state    2021-01-01 2023-03-03   791  67.7\n3 ar        confirmed_7dav_inâ€¦ jhu-câ€¦ state    2021-01-01 2023-03-03   791  76.2\n4 as        confirmed_7dav_inâ€¦ jhu-câ€¦ state    2021-01-01 2023-03-03   791   0  \n5 az        confirmed_7dav_inâ€¦ jhu-câ€¦ state    2021-01-01 2023-03-03   791  83.4\n6 ca        confirmed_7dav_inâ€¦ jhu-câ€¦ state    2021-01-01 2023-03-10   798 104. \n```\n\n\n:::\n:::\n\n\n\n\n## COVIDcast main endpoint - Example query\n\nCounty `geo_values` are [FIPS codes](https://en.wikipedia.org/wiki/List_of_United_States_FIPS_codes_by_county): Orange County, California.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\njhu_county_cases <- pub_covidcast(\n  source = \"jhu-csse\",\n  signals = \"confirmed_7dav_incidence_prop\",\n  geo_type = \"county\",\n  time_type = \"day\",\n  time_values = epirange(20210101, 20210401),\n  geo_values = \"06059\"\n)\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 Ã— 8\n  geo_value signal             source geo_type time_value issue        lag value\n  <chr>     <chr>              <chr>  <fct>    <date>     <date>     <dbl> <dbl>\n1 06059     confirmed_7dav_inâ€¦ jhu-câ€¦ county   2021-01-01 2023-03-03   791  105.\n2 06059     confirmed_7dav_inâ€¦ jhu-câ€¦ county   2021-01-02 2023-03-03   790  107.\n3 06059     confirmed_7dav_inâ€¦ jhu-câ€¦ county   2021-01-03 2023-03-03   789  108.\n4 06059     confirmed_7dav_inâ€¦ jhu-câ€¦ county   2021-01-04 2023-03-03   788  107.\n5 06059     confirmed_7dav_inâ€¦ jhu-câ€¦ county   2021-01-05 2023-03-03   787  105.\n6 06059     confirmed_7dav_inâ€¦ jhu-câ€¦ county   2021-01-06 2023-03-03   786  104.\n```\n\n\n:::\n:::\n\n\n\n::: {.callout-important appearance=\"simple\" icon=\"false\"}\n\nThe `covidcast` endpoint supports `*` in its time and geo fields.\n\nSignal values for all available counties: replace `geo_values = \"06059\"` with `geo_values = \"*\"`.\n:::\n\n## Example queries - Other endpoints: Hospitalizations\n\n[**COVID-19 Hospitalization: Facility Lookup**]{.primary}\n\n<small> API docs: <https://cmu-delphi.github.io/delphi-epidata/api/covid_hosp_facility_lookup.html> </small>\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npub_covid_hosp_facility_lookup(city = \"southlake\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 Ã— 10\n  hospital_pk state ccn    hospital_name    address city  zip   hospital_subtype\n  <chr>       <chr> <chr>  <chr>            <chr>   <chr> <chr> <chr>           \n1 450888      TX    450888 TEXAS HEALTH HAâ€¦ 1545 Eâ€¦ SOUTâ€¦ 76092 Short Term      \n2 670132      TX    670132 METHODIST SOUTHâ€¦ 421 E â€¦ SOUTâ€¦ 76092 Short Term      \n# â„¹ 2 more variables: fips_code <chr>, is_metro_micro <dbl>\n```\n\n\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npub_covid_hosp_facility_lookup(state = \"WY\") |> head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 Ã— 10\n  hospital_pk     state ccn   hospital_name address city  zip   hospital_subtype\n  <chr>           <chr> <chr> <chr>         <chr>   <chr> <chr> <chr>           \n1 100 LANCASTER â€¦ WY    2020â€¦ 42091         <NA>    [C39â€¦ MAIN  390195          \n2 2333 BIDDLE AVE WY    2020â€¦ 26163         POINT â€¦ [C23â€¦ HENRY 230146          \n3 2333 BIDDLE AVâ€¦ WY    2020â€¦ 26163         POINT â€¦ [C23â€¦ SELEC 232031          \n4 2752 CENTURY Bâ€¦ WY    2020â€¦ 42011         POINT â€¦ [C39â€¦ SURGI 390316          \n5 310 SOUTH FALLâ€¦ WY    2020â€¦ 05037         POINT â€¦ [C04â€¦ CROSS 041307          \n6 5200 FAIRVIEW â€¦ WY    2020â€¦ 27025         POINT â€¦ [C24â€¦ FAIRV 240050          \n# â„¹ 2 more variables: fips_code <chr>, is_metro_micro <dbl>\n```\n\n\n:::\n\n```{.r .cell-code}\n# A non-example (there is no city called New York in Wyoming)\n# pub_covid_hosp_facility_lookup(state = \"WY\", city = \"New York\")\n```\n:::\n\n\n\n\n## Example queries - Other endpoints: Hospitalizations\n\n[**COVID-19 Hospitalization by Facility**]{.primary}\n\n<small> API docs: <https://cmu-delphi.github.io/delphi-epidata/api/covid_hosp_facility.html> </small>\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npub_covid_hosp_facility(\n  hospital_pks = \"100075\",\n  collection_weeks = epirange(20200101, 20200501)\n) |> head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 Ã— 113\n  hospital_pk state ccn    hospital_name    address city  zip   hospital_subtype\n  <chr>       <chr> <chr>  <chr>            <chr>   <chr> <chr> <chr>           \n1 100075      FL    100075 ST JOSEPHS HOSPâ€¦ 3001 Wâ€¦ TAMPA 33677 Short Term      \n2 100075      FL    100075 ST JOSEPHS HOSPâ€¦ 3001 Wâ€¦ TAMPA 33677 Short Term      \n3 100075      FL    100075 ST JOSEPHS HOSPâ€¦ 3001 Wâ€¦ TAMPA 33677 Short Term      \n4 100075      FL    100075 ST JOSEPHS HOSPâ€¦ 3001 Wâ€¦ TAMPA 33677 Short Term      \n5 100075      FL    100075 ST JOSEPHS HOSPâ€¦ 3001 Wâ€¦ TAMPA 33677 Short Term      \n6 100075      FL    100075 ST JOSEPHS HOSPâ€¦ 3001 Wâ€¦ TAMPA 33677 Short Term      \n# â„¹ 105 more variables: fips_code <chr>, geocoded_hospital_address <chr>,\n#   hhs_ids <chr>, publication_date <date>, collection_week <date>,\n#   is_metro_micro <lgl>, total_beds_7_day_sum <dbl>,\n#   all_adult_hospital_beds_7_day_sum <dbl>,\n#   all_adult_hospital_inpatient_beds_7_day_sum <dbl>,\n#   inpatient_beds_used_7_day_sum <dbl>,\n#   all_adult_hospital_inpatient_bed_occupied_7_day_sum <dbl>, â€¦\n```\n\n\n:::\n:::\n\n\n\n## Example queries - Other endpoints: Hospitalizations\n\n[**COVID-19 Hospitalization by State**]{.primary}\n\n<small> API docs: <https://cmu-delphi.github.io/delphi-epidata/api/covid_hosp.html> </small>\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npub_covid_hosp_state_timeseries(states = \"MA\", dates = \"20200510\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 Ã— 118\n  state geocoded_state issue      date       critical_staffing_shortage_today_â€¦Â¹\n  <chr> <lgl>          <date>     <date>     <lgl>                              \n1 MA    NA             2024-05-03 2020-05-10 FALSE                              \n# â„¹ abbreviated name: Â¹â€‹critical_staffing_shortage_today_yes\n# â„¹ 113 more variables: critical_staffing_shortage_today_no <lgl>,\n#   critical_staffing_shortage_today_not_reported <lgl>,\n#   critical_staffing_shortage_anticipated_within_week_yes <lgl>,\n#   critical_staffing_shortage_anticipated_within_week_no <lgl>,\n#   critical_staffing_shortage_anticipated_within_week_not_reported <lgl>,\n#   hospital_onset_covid <dbl>, hospital_onset_covid_coverage <dbl>, â€¦\n```\n\n\n:::\n:::\n\n\n\n## Example queries - Other endpoints: Flu endpoints\n\n[**FluSurv hospitalization data**]{.primary} -- Data ends around 2020\n\n<small> API docs: <https://cmu-delphi.github.io/delphi-epidata/api/flusurv.html> </small>\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npub_flusurv(locations = \"ca\", epiweeks = 202001)\n```\n:::\n\n\n\n[**Fluview data**]{.primary} -- Remains active\n\n<small> API docs: <https://cmu-delphi.github.io/delphi-epidata/api/fluview.html> </small>\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npub_fluview(regions = \"nat\", epiweeks = epirange(201201, 202001))\n```\n:::\n\n\n\n::: {.callout-tip}\n## Public vs private endpoints\n\nPublic endpoints are accessed with functions starting with `pub_`\n\nPrivate data can be used with `pvt_` for authorized API keys\n\nStore the key in your `.Reviron` file, or set is as an environment variables\n\n[Examples](https://cmu-delphi.github.io/epidatr/articles/signal-discovery.html)\n:::\n\n<!-- Aside from these public methods (starting with `pub_`),\nthere are private methods (starting with `pvt_` when you type `avail_endpoints()`) that require private access keys. To run these locally, store the keys in your `.Reviron` file, or set them as environmental variables.\nSee [Private methods](https://cmu-delphi.github.io/epidatr/articles/signal-discovery.html) for examples of using private endpoints. -->\n\n## Signal metadata\n\nSome endpoints provide additional metadata\n\n* [**Time Information**]{.primary}: available time frames and most recent update\n* [**Geography Information**]{.primary}: available geographies\n\nMetadata accessors\n\n* `pub_covidcast_meta()`: metadata for COVIDcast\n* `pub_fluview_meta()`: metadata for FluView\n* `pub_meta()`: general metadata for the Delphi Epidata API\n\n# Versioning in `{epidatr}`\n\n## Versioned data in `{epidatr}`\n\nEpidata API contains each signal's estimate, location, date, and update timeline\n\nRequesting Specific Data Versions:\n\n* Use `as_of` or `issues` to specify data availability\n* `as_of` always fetches one version\n* `issues` can fetch multiple\n* Only one may be used at a time\n* Not all endpoints support both\n\n\n## Obtaining data \"as of\" a specific date\n\n[Doctor Visits](https://cmu-delphi.github.io/delphi-epidata/api/covidcast-signals/doctor-visits.html) (from the `covidcast` endpoint)\n\n* The percentage of outpatient visits w/ Covid-like illness\n* Pennsylvania on May 1, 2020:\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndv_pa_as_of <- pub_covidcast(\n  source = \"doctor-visits\",\n  signals = \"smoothed_adj_cli\",\n  time_type = \"day\",\n  time_values = \"2020-05-01\",\n  geo_type = \"state\",\n  geo_values = \"pa\",\n  as_of = \"2020-05-07\"\n)\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 Ã— 7\n  geo_value signal           source        time_value issue        lag value\n  <chr>     <chr>            <chr>         <date>     <date>     <dbl> <dbl>\n1 pa        smoothed_adj_cli doctor-visits 2020-05-01 2020-05-07     6  2.58\n```\n\n\n:::\n:::\n\n\n\n* Initial estimate *issued* on May 7, 2020\n* Due to delay from reporting and ingestion by the API\n\n## Obtaining data \"as of\" a specific date\n\n[Default behaviour:]{.primary} unspecified `as_of`, get the most recent data\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndv_pa_final <- pub_covidcast(\n  source = \"doctor-visits\",\n  signals = \"smoothed_adj_cli\",\n  time_type = \"day\",\n  time_values = \"2020-05-01\",\n  geo_type = \"state\",\n  geo_values = \"pa\"\n)\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 Ã— 8\n  geo_value signal           source     time_value issue        lag value stderr\n  <chr>     <chr>            <chr>      <date>     <date>     <dbl> <dbl>  <dbl>\n1 pa        smoothed_adj_cli doctor-viâ€¦ 2020-05-01 2020-07-04    64  5.97     NA\n```\n\n\n:::\n:::\n\n\n\n[**Estimate changed substantially**]{.primary}:\n\n* Increased to ~6% from <3%\n\n## Versioning is important for forecasting\n\n<br>\n\n* Backtesting requires using data that would have been available at the time\n\n<br>\n\n* Not later updates\n\n<br>\n\n* Overly optimistic\n\n\n## Obtaining multiple specific issues for one state\nRequest all issues in a certain time period\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"1,8,9\"}\ndv_pa_issues <- pub_covidcast(\n  source = \"doctor-visits\",\n  signals = \"smoothed_adj_cli\",\n  time_type = \"day\",\n  time_values = \"2020-05-01\",\n  geo_type = \"state\",\n  geo_values = \"pa\",\n  issues = epirange(\"2020-05-01\", \"2020-05-15\")\n)\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 Ã— 8\n  geo_value signal           source     time_value issue        lag value stderr\n  <chr>     <chr>            <chr>      <date>     <date>     <dbl> <dbl>  <dbl>\n1 pa        smoothed_adj_cli doctor-viâ€¦ 2020-05-01 2020-05-07     6  2.58     NA\n2 pa        smoothed_adj_cli doctor-viâ€¦ 2020-05-01 2020-05-08     7  3.28     NA\n3 pa        smoothed_adj_cli doctor-viâ€¦ 2020-05-01 2020-05-09     8  3.32     NA\n4 pa        smoothed_adj_cli doctor-viâ€¦ 2020-05-01 2020-05-12    11  3.59     NA\n5 pa        smoothed_adj_cli doctor-viâ€¦ 2020-05-01 2020-05-13    12  3.63     NA\n6 pa        smoothed_adj_cli doctor-viâ€¦ 2020-05-01 2020-05-14    13  3.66     NA\n```\n\n\n:::\n:::\n\n\n\n## Obtaining multiple issues for one state\n\nTo get all issues up to a specific date, set an extreme lower bound\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"1,8,9\"}\ndv_pa_issues_sub <- pub_covidcast(\n  source = \"doctor-visits\",\n  signals = \"smoothed_adj_cli\",\n  time_type = \"day\",\n  time_values = \"2020-05-01\",\n  geo_type = \"state\",\n  geo_values = \"pa\",\n  issues = epirange(\"1900-01-01\", \"2020-05-15\")\n)\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 Ã— 8\n  geo_value signal           source     time_value issue        lag value stderr\n  <chr>     <chr>            <chr>      <date>     <date>     <dbl> <dbl>  <dbl>\n1 pa        smoothed_adj_cli doctor-viâ€¦ 2020-05-01 2020-05-07     6  2.58     NA\n2 pa        smoothed_adj_cli doctor-viâ€¦ 2020-05-01 2020-05-08     7  3.28     NA\n3 pa        smoothed_adj_cli doctor-viâ€¦ 2020-05-01 2020-05-09     8  3.32     NA\n4 pa        smoothed_adj_cli doctor-viâ€¦ 2020-05-01 2020-05-12    11  3.59     NA\n5 pa        smoothed_adj_cli doctor-viâ€¦ 2020-05-01 2020-05-13    12  3.63     NA\n6 pa        smoothed_adj_cli doctor-viâ€¦ 2020-05-01 2020-05-14    13  3.66     NA\n```\n\n\n:::\n:::\n\n\n\nNo change here â€¢ Can matter if the latency or reporting lag is unknown\n\n[API docs](https://cmu-delphi.github.io/delphi-epidata/api/covidcast-signals/doctor-visits.html)\nshow the earliest date available.\n\n## Obtaining multiple issues for one state\n\nAt some point, nothing changes â€¢ It is [finalized]{.primary} â€¢ That will be the \"last\" issue\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"1,8,9\"}\ndv_pa_issues_all <- pub_covidcast(\n  source = \"doctor-visits\",\n  signals = \"smoothed_adj_cli\",\n  time_type = \"day\",\n  time_values = \"2020-05-01\",\n  geo_type = \"state\",\n  geo_values = \"pa\",\n  issues = epirange(\"1900-01-01\", \"2024-12-11\") # From the 1900s to today\n)\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 Ã— 8\n  geo_value signal           source     time_value issue        lag value stderr\n  <chr>     <chr>            <chr>      <date>     <date>     <dbl> <dbl>  <dbl>\n1 pa        smoothed_adj_cli doctor-viâ€¦ 2020-05-01 2020-06-29    59  5.99     NA\n2 pa        smoothed_adj_cli doctor-viâ€¦ 2020-05-01 2020-06-30    60  5.99     NA\n3 pa        smoothed_adj_cli doctor-viâ€¦ 2020-05-01 2020-07-01    61  5.95     NA\n4 pa        smoothed_adj_cli doctor-viâ€¦ 2020-05-01 2020-07-02    62  5.97     NA\n5 pa        smoothed_adj_cli doctor-viâ€¦ 2020-05-01 2020-07-03    63  5.97     NA\n6 pa        smoothed_adj_cli doctor-viâ€¦ 2020-05-01 2020-07-04    64  5.97     NA\n```\n\n\n:::\n:::\n\n\n\n* Avoid queries with too-late minimum too-early maximum issue\n* Could be misleading results\n\n<!-- * We caution against starting queries with too late a minimum issue or too early maximum issue, as it could lead to incorrect or misleading results. You're safest bet to capture all issues is on the next slide... -->\n\n## Obtaining all issues for one state\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"1,5,8,9\"}\ndv_pa_issues_star <- pub_covidcast(\n  source = \"doctor-visits\",\n  signals = \"smoothed_adj_cli\",\n  time_type = \"day\",\n  time_values = epirange(\"2020-05-01\", \"2020-05-07\"),\n  geo_type = \"state\",\n  geo_values = \"pa\",\n  issues = \"*\"\n)\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 8 Ã— 8\n  geo_value signal           source     time_value issue        lag value stderr\n  <chr>     <chr>            <chr>      <date>     <date>     <dbl> <dbl>  <dbl>\n1 pa        smoothed_adj_cli doctor-viâ€¦ 2020-05-01 2020-05-07     6  2.58     NA\n2 pa        smoothed_adj_cli doctor-viâ€¦ 2020-05-01 2020-05-08     7  3.28     NA\n3 pa        smoothed_adj_cli doctor-viâ€¦ 2020-05-01 2020-05-09     8  3.32     NA\n4 pa        smoothed_adj_cli doctor-viâ€¦ 2020-05-01 2020-05-12    11  3.59     NA\n5 pa        smoothed_adj_cli doctor-viâ€¦ 2020-05-01 2020-05-13    12  3.63     NA\n6 pa        smoothed_adj_cli doctor-viâ€¦ 2020-05-01 2020-05-14    13  3.66     NA\n7 pa        smoothed_adj_cli doctor-viâ€¦ 2020-05-01 2020-05-15    14  3.66     NA\n8 pa        smoothed_adj_cli doctor-viâ€¦ 2020-05-01 2020-05-16    15  3.61     NA\n```\n\n\n:::\n:::\n\n\n\n## Obtaining all issues for all states\n\nUsing `*` gives all available\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"1,7-9\"}\ndv_state_issues_star <- pub_covidcast(\n  source = \"doctor-visits\",\n  signals = \"smoothed_adj_cli\",\n  time_type = \"day\",\n  time_values = epirange(\"2020-05-01\", \"2020-05-07\"),\n  geo_type = \"state\",\n  geo_values = \"*\",\n  issues = \"*\"\n)\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 Ã— 8\n  geo_value signal           source     time_value issue        lag value stderr\n  <chr>     <chr>            <chr>      <date>     <date>     <dbl> <dbl>  <dbl>\n1 ak        smoothed_adj_cli doctor-viâ€¦ 2020-05-01 2020-05-07     6  1.61     NA\n2 ak        smoothed_adj_cli doctor-viâ€¦ 2020-05-01 2020-05-08     7  2.40     NA\n3 ak        smoothed_adj_cli doctor-viâ€¦ 2020-05-01 2020-05-09     8  2.38     NA\n4 ak        smoothed_adj_cli doctor-viâ€¦ 2020-05-01 2020-05-12    11  2.38     NA\n5 ak        smoothed_adj_cli doctor-viâ€¦ 2020-05-01 2020-05-13    12  2.36     NA\n6 ak        smoothed_adj_cli doctor-viâ€¦ 2020-05-01 2020-05-14    13  2.36     NA\n```\n\n\n:::\n:::\n\n\n\n\n<!--\n\n## Last but not least... The do nothing approach\n\n![](gfx/do-nothing.jpg){height=\"550px\"}\n\n\n\n## The do nothing approach\n\n* `geo_values = *` is the default\n* `issues` defaults to \"most recent\"\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndv_state_default <- pub_covidcast(\n  source = \"doctor-visits\",\n  signals = \"smoothed_adj_cli\",\n  time_type = \"day\",\n  time_values = epirange(\"2020-05-01\", \"2020-05-07\"),\n  geo_type = \"state\"\n)\n```\n:::\n\n\n\n-->\n\n## Obtaining one issue for all states\n\n<!--\n[**Final question:**]{.primary}  What do you think happens when we adopt a \"do nothing\" approach to `geo_values` and `issues` (take both of them out)?\n\n<small> [**Hint**]{.primary}: remember a couple slides ago, when we removed `as_of`, we got the most recent estimate for PA. </small>\n-->\n\nDefaults are intended to be \"what you would expect\"\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndv_state_default <- pub_covidcast(\n  source = \"doctor-visits\",\n  signals = \"smoothed_adj_cli\",\n  time_type = \"day\",\n  time_values = epirange(\"2020-05-01\", \"2020-05-07\"),\n  geo_type = \"state\"\n)\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 Ã— 8\n  geo_value signal           source     time_value issue        lag value stderr\n  <chr>     <chr>            <chr>      <date>     <date>     <dbl> <dbl>  <dbl>\n1 ak        smoothed_adj_cli doctor-viâ€¦ 2020-05-01 2020-07-04    64  5.72     NA\n2 al        smoothed_adj_cli doctor-viâ€¦ 2020-05-01 2020-07-04    64  2.74     NA\n3 ar        smoothed_adj_cli doctor-viâ€¦ 2020-05-01 2020-07-04    64  4.23     NA\n4 az        smoothed_adj_cli doctor-viâ€¦ 2020-05-01 2020-07-04    64  2.78     NA\n5 ca        smoothed_adj_cli doctor-viâ€¦ 2020-05-01 2020-07-04    64  4.25     NA\n6 co        smoothed_adj_cli doctor-viâ€¦ 2020-05-01 2020-07-04    64  8.77     NA\n```\n\n\n:::\n:::\n\n\n\n<hr>\n\n* most recent issue\n* all states\n\n\n<!-- ## Observations issued with a specific lag\n<div style=\"font-size: 0.8em;\">\n* We can use the `lag` argument to request only data reported with a certain lag.\n\n* **Example**: Request  a lag of 7 days fetches only data issued exactly 7 days after the corresponding `time_value`:\n\n\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n\n</div>\n\n## Query results exclusion\n<div style=\"font-size: 0.8em;\">\n* Although the query we ran on the previous slide requested values from May 1 to May 7, May 3 and May 4 were not included due to a 7-day lag.\n\n* Results for those dates appear only if updates are issued on the corresponding lag day (e.g., May 10).\n\n\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n\n</div>\n-->\n\n## Main takeaways\n\n* [**Delphi Epidata:**]{.primary} platform for real-time epidemic data\n    * provides (aggregated) signals for tracking and forecasting\n    * sources like [**health records**]{.secondary}, [**mobility patterns**]{.tertiary}, and [**more**]{.fourth-colour}.\n\n<!-- * [**Delphi Epidata:**]{.primary} A one-stop platform for real-time epidemic data, providing aggregated signals for disease tracking and forecasting from diverse sources like health records, mobility patterns, and more. -->\n\n* [**Epidata API:**]{.primary} delivers up-to-date, granular epidemiological data + historical versions.\n\n<!-- Open-access API delivering up-to-date, granular epidemiological data + makes all historical versions available. -->\n\n* `{epidatr}`: Client package for R\n\n<!-- and interactive tools for discovering and analyzing health signals. -->\n\n* [**Versioned Data and Latency:**]{.primary}\n    1. `as_of`:  One version; the specific date when the data was last updated\n    1. `issues`: Multiple versions; with different `as_of` dates\n\nManages the record of revisions for transparency and accuracy in data analysis.\n\n<!-- Panel data captures time-series trends, which are often subject to revision.  A standout feature of this API is its inclusion of two critical fields... -->\n\n<!-- 1. as_of:  One version of the data, and referring to the specific date when the data was last updated (i.e. the data was updated `as_of` this date) -->\n\n<!-- 2. `issues`: Multiple versions of the data, each corresponding to different `as_of` dates, capturing revisions over time. -->\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}